function [] = plot_plotData(varargin)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% plot_plotData plot simulation results. It requires plotData .mat files
% generated using prep_plotData function.
%   
% Argumentss:
%   Simulation results generated by sim_testNBSPredict function.
%       (e.g. simRes_ElasticNet_Class_09-Apr-2021_plotData.mat)
%   plotType = Plot types to be generated (default = {'ROC','barTPR','time','predPerf'}). 
%   Available plot types are: 
%       ROC = ROC Curve. Sensitivity and specificity must be present in
%           plot data input sturcutures.
%       precisionRecall = Precision-Recall Curve. Precision and 
%           recall must be present in plot data input sturcutures.
%       plot_metric = Plots performance of algorithms evaluated with
%           certain metrics as a function of weight thresholds. The name of
%           the metric must also be entered! 
%       bar_TPR  = Bar plot indicating mean true positive rates at certain
%           false positive rates. Sensitivity and specificity must be 
%           present in plot data input sturcutures.
%       bar_precision = Bar plot of mean precision rates at certain recall
%           rates. Precision and recall must be present in plot data 
%           input sturcutures.
%       time    = Bar plot showing CPU time of algorithms. 
%       predPerf= Bar plot showing performance of algorithms in predicting
%           target variables.
%   levels = Certain FPR and recall levels used in barTPR and 
%       barPrecision plots, respectively. Default levels are:
%       (0.01, 0.05, 0.1) for FPR and (0.1, 0.5, 1) for recall. The levels
%       be given as a structure datatype. For example: 
%           FPRlevels.levels.zeroZeroOne = 0.01;
%           FPRlevels.levels.zeroZeroFive = 0.05;
%       or
%           recallLevels.levels.zeroOne = 0.1;
%           recallLevels.level.one = 1; 
%       Levels must be given in a substructure called 'levels' as seen in
%       the example above. 
%   metric = Metric name to plot if plot_metric is entered in plotType
%       argument. Make sure that the metric values are present in the input
%       plotData structure. 
%   ifLegend = If plot legends displayed (default = 1). 
%   ext      = File extension for figure files (default = 'pdf').     
%
% Example:
%   plot_plotData;
%   prep_plotData('plotType',{'ROC','barTPR','plot_metric'},'metric','AUC',...
%       'ifLegend',0,'ext','png')
%   
% Created by Emin Serin, 11.04.2021
%
% See also: sim_testNBSPredict, prep_plotData, compute_modelMetrics
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Parameters
% Default parameters
defaultVals.ext = 'pdf'; defaultVals.ifLegend = 1; 
defaultVals.plotType = {'ROC','bar_TPR','time','predPerf'};

% Validation
p = inputParser();
p.PartialMatching = 0; % deactivate partial matching.

% Add NBSPredict parameters.
addParameter(p,'ext',defaultVals.ext);
addParameter(p,'plotType',defaultVals.plotType);
addParameter(p,'levels',[]);
addParameter(p,'metric',[]);
addParameter(p,'ifLegend',defaultVals.ifLegend);

% Parse inputs.
parse(p,varargin{:});

ext = p.Results.ext;
plotType = p.Results.plotType;
levels = p.Results.levels;
metric = p.Results.metric; 

% Figure properties;
properties.ifLegend = p.Results.ifLegend;

% Load plot data.
[files, path] = uigetfile('*_plotData.mat','Please plotData .mat files.',...
    'MultiSelect','on');

if ~iscell(files)
    files = {files};
end

nFiles = numel(files);
for f = 1: nFiles
    cFile = files{f};
    tmp = load([path cFile]);
    algorithm = tmp.plotData.info.simulationInfo.algorithm;
    weightThresh = tmp.plotData.info.weightTresh;
    plotData.info.weightThresh = weightThresh;
    plotData.algs.(algorithm).conds = tmp.plotData.conds;
end

% Output directory
outputDir = [path,'figures',filesep];
if ~exist(outputDir, 'dir')
    mkdir(outputDir)
end

% Plot and save;
conds = fieldnames(plotData.algs.(algorithm).conds);
nConds = numel(conds);
nPlotType = numel(plotType);


for p = 1: nPlotType
    cPlot = plotType{p};
    figProp = properties;
    switch cPlot
        % Function handles for various plot types.
        case {'ROC','precisionRecall'}
            [~, lsLevels] = check_organize_levels(levels,cPlot);
            figProp.XLim = [0, max(lsLevels)];
            figProp.XTick = [0,lsLevels];
            if strcmpi(cPlot,'ROC')
                plotHandle = @(cond) plot_ROC(plotData,cond,lsLevels,figProp,outputDir,ext);
            else
                plotHandle = @(cond) plot_precisionRecall(plotData,cond,lsLevels,figProp,outputDir,ext);
            end
        case 'plot_metric'
            plotHandle = @(cond) plot_metric(plotData,cond,metric,figProp,outputDir,ext);
        case 'bar_TPR'
            figProp.yName = 'TPR';
            figProp.YLim = [0,1];
            [levels, ~] = check_organize_levels(levels,cPlot);
            plotHandle = @(cond) plot_bar_TPR(plotData,cond,levels,figProp,outputDir,ext);
        case 'bar_precision'
            figProp.yName = 'Precision';
            figProp.YLim = [0,1];
            [levels, ~] = check_organize_levels(levels,cPlot);
            plotHandle = @(cond) plot_bar_precision(plotData,cond,levels,figProp,outputDir,ext);
        case 'time'
            figProp.yName = 'Time (seconds)';
            figProp.YLim = [];
            plotHandle = @(cond) plot_bar_metric(plotData,cond,...
                'time',figProp,outputDir,ext);
        case 'predPerf'
            figProp.YLim = [];
            figProp.yName = 'Prediction Performance';
            plotHandle = @(cond) plot_bar_metric(plotData,cond,...
                'predPerf',figProp,outputDir,ext);
        otherwise
            error('Please enter a valid plot type! See help!')
    end
    
    for c = 1: nConds
        cCond = conds{c};
        plotHandle(cCond);
    end
end
end

% Plot Functions
function [] =  plot_ROC(plotData,cond,levels,properties,outputDir,ext)
% Plot ROC Curve.
metrics = {'sensitivity','specificity'};
fileName = [outputDir,sprintf('ROC_%s',cond)];
cond = prepare_point_data(plotData,cond,metrics);

g = gramm('x',1-cond.specificity(:),'y',cond.sensitivity(:),...
    'color',cond.colors);
g.geom_point();
for l = 1: numel(levels)
  g.geom_vline('xintercept',levels(l));    
end

g.set_names('x','False Positive Rate','y','True Positive Rate',...
    'color','Algorithm');
g.axe_property('XLim',properties.XLim,'XTick',properties.XTick);
g.set_text_options('base_size',16);
g.set_line_options('base_size',3);
if ~properties.ifLegend
    g.no_legend();
else
    g.set_layout_options('legend_width',0.2);
end
save_plot(g,fileName,ext);
end

function [] =  plot_precisionRecall(plotData,cond,levels,properties,outputDir,ext)
% Plot ROC Curve.
metrics = {'precision','recall'};
fileName = [outputDir,sprintf('precisionRecall_%s',cond)];
cond = prepare_point_data(plotData,cond,metrics);

g = gramm('x',cond.recall(:),'y',cond.precision(:),...
    'color',cond.colors);
g.geom_point();
for l = 1: numel(levels)
  g.geom_vline('xintercept',levels(l));    
end

g.set_names('x','Recall','y','Precision',...
    'color','Algorithm');
g.axe_property('XLim',properties.XLim,'XTick',properties.XTick);
g.set_text_options('base_size',16);
g.set_line_options('base_size',3);
g.set_layout_options('legend_width',0.2);
if ~properties.ifLegend
    g.no_legend();
end
save_plot(g,fileName,ext);
end

function [] = plot_metric(plotData,cond,metric,properties,outputDir,ext)
% Plots Metric-Weight Threshold point plot for given metric.
fileName = [outputDir,sprintf('%s_%s',metric,cond)];
cond = prepare_point_data(plotData,cond,{metric});
xData = repmat(plotData.info.weightThresh,1,size(cond.(metric),2));

g = gramm('x',xData,'y',cond.(metric)(:),'color',cond.colors);
g.geom_point('alpha',0.7);
g.set_names('x','Weight Threshold','y',metric,...
    'color','Algorithm');
%g.axe_property('YLim',properties.YLim);
g.set_text_options('base_size',16);
g.set_line_options('base_size',3);
if ~properties.ifLegend
    g.no_legend();
else
    g.set_layout_options('legend_width',0.2);
end
save_plot(g,fileName,ext);
end

function [g] = base_plot_bar(data,properties)
% Base function for bar plot.
g = gramm('x',data.colors,'y',data.y(:),'color',data.colors);
g.stat_summary('type','ci','geom',{'bar','black_errorbar'},'width',1.5);
g.set_names('x','','y',properties.yName);
if ~isempty(properties.YLim)
    g.axe_property('YLim',properties.YLim);
else
    maxY = max(data.y(:));
    g.axe_property('YLim',[0,maxY+maxY*0.2]);
end
g.set_text_options('base_size',11.5);
g.set_line_options('base_size',3);
g.no_legend();
end

function [] = plot_bar_metric(plotData,cond,metric,properties,outputDir,ext)
% Plots bar plot for given metric.
% Available metrics: Prediction Performance, Time
[data] = prepare_bar_data(plotData,cond,metric,[]);
g = base_plot_bar(data,properties);
fileName = [outputDir,sprintf('%s_bar_%s',metric,cond)];
save_plot(g,fileName,ext);
end

function [] = plot_bar_TPR(plotData,cond,FPRlevels,properties,outputDir,ext)
% Plots bar plots indicating mean TPR at certain FPR levels.
FPRnames = fieldnames(FPRlevels.levels);
level.basedOn = 'FPR';
for l = 1:numel(FPRnames)
    cFPRname = FPRnames{l};
    level.levels.(cFPRname) = FPRlevels.levels.(cFPRname);
    [data] = prepare_bar_data(plotData,cond,'sensitivity',level);
    g = base_plot_bar(data,properties);
    fileName = [outputDir,sprintf('%s_%s_%s','TPR',cFPRname,cond)];
    save_plot(g,fileName,ext)
    level.levels = rmfield(level.levels,cFPRname);
end
end

function [] = plot_bar_precision(plotData,cond,recallLevels,properties,outputDir,ext)
% Plots bar plots indicating mean precision at certain recall levels.
recallNames = fieldnames(recallLevels.levels);
level.basedOn = 'recall';
for l = 1:numel(recallNames)
    cRecallName = recallNames{l};
    level.levels.(cRecallName) = recallLevels.levels.(cRecallName);
    [data] = prepare_bar_data(plotData,cond,'precision',level);
    g = base_plot_bar(data,properties);
    fileName = [outputDir,sprintf('%s_%s_%s','precision',cFPRname,cond)];
    save_plot(g,fileName,ext);
    level.levels = rmfield(level.levels,cRecallName);
end
end

% Helper Functions
function [data] = prepare_point_data(plotData,cond,metrics)
% Prepares data for point plots.
algorithms = fieldnames(plotData.algs);
nAlgs = numel(algorithms);
nThresh = numel(plotData.info.weightThresh);
colors = repelem(organize_xNames(algorithms),nThresh);
tmp = zeros(nThresh,nAlgs);
nMetrics = numel(metrics);
for m = 1:nMetrics
    cMetric = metrics{m};
    for a = 1 : nAlgs
        cAlg = algorithms{a};
        tmp(:,a) = plotData.algs.(cAlg).conds.(cond).(cMetric).mean;
    end
    data.(cMetric) = tmp;
end
data.colors = colors;
end

function [data] = prepare_bar_data(plotData,cond,metric,certainLevel)
% Prepare data for bar plots.
algorithms = fieldnames(plotData.algs);
xNames = organize_xNames(algorithms);
[ifCPM,cpmIdx] = ismember('CPM',xNames);
if ifCPM && strcmpi(metric,'predPerf')
    xNames = {xNames{1:cpmIdx-1},'CPM Positive','CPM Negative',...
        xNames{cpmIdx+1:end}};
end
nAlgs = numel(algorithms);
nSim = size(plotData.algs.(algorithms{1}).conds.(cond).time,1);
colors = repelem(xNames,nSim);
tmp = zeros(nSim,numel(xNames));
k = 1;
for a = 1 : nAlgs
    cAlg = algorithms{a};
    cData = plotData.algs.(cAlg).conds.(cond);
    if isempty(certainLevel)
        if strcmpi(cAlg,'CPM') && strcmpi(metric,'predPerf')
            tmp(:,k) = cData.predPerf(:,1);
            k = k+1;
            tmp(:,k) = cData.predPerf(:,2);
        else
            tmp(:,k) = cData.(metric);
        end
    else
        basedOn = certainLevel.basedOn;
        if strcmpi(basedOn,'FPR')
            basedOn = 1-cData.specificity.perf;
        else
            basedOn = cData.(basedOn).perf;
        end
        certLevel = fieldnames(certainLevel.levels);
        certLevel = certainLevel.levels.(certLevel{1});
        [~,idx] = min(abs(basedOn - certLevel),[],2);
        for s = 1: nSim
            tmp(s,k) = cData.(metric).perf(s,idx(s));
        end
    end
    k = k+1;
end
data.y = tmp;
data.colors = colors;
data.algorithms = algorithms;
end

function [] = save_plot(g,fileName,ext)
g.draw();
g.export('file_name',fileName,'file_type',ext,'width',24,'height',16);
%g.export('file_name',fileName,'file_type',ext);
close all
end

function [xNames] = organize_xNames(selNames)
% Makes algorithm names better.
nSel = numel(selNames);
xNames = cell(nSel,1);
for s = 1: nSel
    switch selNames{s}
        case 'NBSPredict'
            xNames{s} = 'NBS-Predict';
        case 'ElasticNet'
            xNames{s} = 'Elastic Net';
        case 'Top5'
            xNames{s} = 'Top 5%';
        case 'pVal'
            xNames{s} = 'p-value';
        otherwise
            xNames{s} = selNames{s};
    end
end
end

function [levels, listLevels] = check_organize_levels(levels,plotType)
% Checks if levels are provided. 
% Converts levels structure to a list. 
if isempty(levels)
    if strfind(plotType,'precision')
        levels.levels.zeroOne = 0.1;
        levels.levels.zeroFive = 0.5;
        levels.levels.one = 1;
    elseif any(strcmpi(plotType,{'ROC','bar_TPR'}))
        levels.levels.zeroZeroOne = 0.01;
        levels.levels.zeroZeroFive = 0.05;
        levels.levels.zeroOne = 0.1;
    end
end
levelNames = fieldnames(levels.levels);
for l = 1:numel(levelNames)
    listLevels(l) = levels.levels.(levelNames{l});
end
end